@page "/gastos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager

    <a class="btn btn-primary" href="gastos/crear">Crear Gasto</a>

    <div class="p-3 my-3 border shadow-sm">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="nombre" class="sr-only">Nombre</label>
                    <input @bind-value="nombre" @bind-value:event="oninput"
                           @onkeypress="@((KeyboardEventArgs e) => NombreKeyPress(e))"
                           class="form-control" type="text" placeholder="Nombre" id="nombre" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="mostrarFiltros" @bind="mostrarFiltros">
                    <label class="form-check-label" for="mostrarFiltros">
                        Mostrar filtros
                    </label>
                </div>
            </div>
        </div>

        @if (mostrarFiltros)
        {
            <div class="form-inline mb-3">
                <div class="form-group mr-sm-2">
                    <select class="form-control" @bind="mesSeleccionado">
                        <option value="0">--todos los meses--</option>
                        <option value="1">Enero</option>
                        <option value="2">Febrero</option>
                        <option value="3">Marzo</option>
                        <option value="4">Abril</option>
                        <option value="5">Mayo</option>
                        <option value="6">Junio</option>
                        <option value="7">Julio</option>
                        <option value="8">Agosto</option>
                        <option value="9">Septiembre</option>
                        <option value="10">Octubre</option>
                        <option value="11">Noviembre</option>
                        <option value="12">Diciembre</option>
                    </select>
                </div>
                <div class="form-group mr-sm-2">
                    <select class="form-control" @bind="personaSeleccionada">
                        <option value="0">--seleccione una persona--</option>
                        @foreach (var persona in personas)
                        {
                            <option value="@persona.Id">@persona.Nombre</option>
                        }
                    </select>
                </div>
                <div class="form-group mr-sm-2">
                    <select class="form-control" @bind="tipoSeleccionado">
                        <option value="0">--seleccione un tipo--</option>
                        @foreach (var tipo in tipos)
                        {
                            <option value="@tipo.Id">@tipo.Nombre</option>
                        }
                    </select>
                </div>
                <button class="btn btn-primary mr-sm-2" type="button" @onclick="FiltrarGastos">Filtrar</button>
                <button class="btn btn-danger" type="button" @onclick="LimpiarFiltros">Limpiar</button>
            </div>
        }

        <div>
            <ListadoGastos Gastos="gastos" BorrarGasto="BorrarGasto" />
            <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></Paginacion>
        </div>
    </div>
    
    <h5>TOTAL GASTOS DEL MES: @totalGastos</h5>


@code {
    private List<Gasto> gastos;
    private int paginaActual = 1;
    private int paginasTotales;
    private decimal totalGastos;
    private List<Persona> personas = new List<Persona>();
    private List<Tipo> tipos = new List<Tipo>();
    private bool mostrarFiltros = false;

    private string nombre = "";
    private string mesSeleccionado = "0";
    private string personaSeleccionada = "0";
    private string tipoSeleccionado = "0";

    Dictionary<string, string> queryStringDict = new Dictionary<string, string>();

    protected async override Task OnInitializedAsync()
    {
        await ObtenerPersonas();
        await ObtenerTipos();

        var url = navigationManager.Uri;
        var queries = navigationManager.ObtenerQueryStrings(url);

        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);
        }
        else
        {
            queryStringDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await RealizarBusqueda(queryStrings);
        }
    }

    private void LlenarCampos()
    {
        if (queryStringDict.ContainsKey("nombre"))
        {
            nombre = queryStringDict["nombre"];
        }

        if (queryStringDict.ContainsKey("mes"))
        {
            mesSeleccionado = queryStringDict["mes"];
        }

        if (queryStringDict.ContainsKey("personaid"))
        {
            personaSeleccionada = queryStringDict["personaid"];
        }

        if (queryStringDict.ContainsKey("tipoid"))
        {
            tipoSeleccionado = queryStringDict["tipoid"];
        }

        if (queryStringDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringDict["pagina"], out paginaActual);
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevosGastos();
    }

    private async Task BorrarGasto(Gasto gasto)
    {
        var confirmar = await mostrarMensajes.MostrarMensajeConfirmacion($"¿Desea borrar a {gasto.Nombre}?");

        if (confirmar)
        {
            var responseHttp = await repositorio.Delete($"api/gastos/{gasto.Id}");

            if (responseHttp.Error)
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
            else
            {
                await mostrarMensajes.MostrarMensajeExitoso($"Se ha eliminado a {gasto.Nombre}");

                if (gastos.Count == 1 && paginaActual > 1)
                {
                    paginaActual -= 1;
                }

                await CargarNuevosGastos();
            }
        }
    }

    private async Task NombreKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FiltrarGastos();
        }
    }

    private async Task FiltrarGastos()
    {
        paginaActual = 1;
        await CargarNuevosGastos();
    }

    private async Task CargarNuevosGastos()
    {
        var queryStrings = GenerarQueryStrings();
        navigationManager.NavigateTo("/gastos?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<GastosDTO>("api/gastos/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        gastos = httpResponse.Response.Gastos;
        totalGastos = httpResponse.Response.totalGastos;
    }

    private string GenerarQueryStrings()
    {
        if (queryStringDict == null)
        {
            queryStringDict = new Dictionary<string, string>();
        }

        queryStringDict["nombre"] = nombre;
        queryStringDict["mes"] = mesSeleccionado;
        queryStringDict["personaid"] = personaSeleccionada;
        queryStringDict["tipoid"] = tipoSeleccionado;
        queryStringDict["pagina"] = paginaActual.ToString();

        var valoresPorDefecto = new List<string>() { "", "0" };

        // personaid=7&nombre=cristian...

        return string.Join("&", queryStringDict
            .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task ObtenerPersonas()
    {
        var httpResponse = await repositorio.Get<List<Persona>>("api/personas");
        personas = httpResponse.Response;
    }

    private async Task ObtenerTipos()
    {
        var httpResponse = await repositorio.Get<List<Tipo>>("api/tipos");
        tipos = httpResponse.Response;
    }

    private async Task LimpiarFiltros()
    {
        nombre = "";
        personaSeleccionada = "0";
        tipoSeleccionado = "0";
        mesSeleccionado = "0";
        paginaActual = 1;
        await CargarNuevosGastos();
    }
}
